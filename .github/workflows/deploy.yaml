name: CI/CD Fullstack Deploy

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Checkout code
      - name: Checkout repository
        uses: actions/checkout@v3

      # ------------------------
      # Frontend (Angular)
      # ------------------------
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install frontend dependencies
        run: |
          cd Deployment_App_F
          npm ci

      - name: Build Angular app
        run: |
          cd Deployment_App_F
          npm run build --prod

      - name: Deploy frontend to S3
        run: |
          aws s3 sync Deployment_App_F/dist/ s3://my-angular-frontend-12345 --delete
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      # ------------------------
      # Backend (Java + Docker)
      # ------------------------
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build backend JAR
        run: |
          cd Deployment-jobs-api
          mvn clean package -DskipTests

      - name: Build Docker image
        run: |
          cd Deployment-jobs-api
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/my-backend:latest .

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/my-backend:latest

      # ------------------------
      # Deploy Backend to EC2
      # ------------------------
      - name: Save EC2 key
        run: |
          echo "${{ secrets.EC2_KEY }}" > ec2-key.pem
          chmod 600 ec2-key.pem

      - name: Deploy backend container on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ec2-key.pem ec2-user@${{ secrets.EC2_HOST }} << 'EOF'
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/my-backend:latest
            docker stop my-backend || true
            docker rm my-backend || true
            docker run -d --name my-backend -p 8080:8080 ${{ secrets.DOCKERHUB_USERNAME }}/my-backend:latest
          EOF
